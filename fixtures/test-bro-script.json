[
{
    "model": "rules.rule",
    "pk": 102,
    "fields": {
        "rev": 0,
        "reference": null,
        "rule_full": "##! Detect file downloads that have hash values matching files in Team\r\n##! Cymru's Malware Hash Registry (http://www.team-cymru.org/Services/MHR/).\r\n\r\n@load base/frameworks/files\r\n@load base/frameworks/notice\r\n@load frameworks/files/hash-all-files\r\n\r\nmodule TeamCymruMalwareHashRegistry;\r\n\r\nexport {\r\n\tredef enum Notice::Type += {\r\n\t\t## The hash value of a file transferred over HTTP matched in the\r\n\t\t## malware hash registry.\r\n\t\tMatch\r\n\t};\r\n\r\n\t## File types to attempt matching against the Malware Hash Registry.\r\n\tconst match_file_types = /application\\/x-dosexec/ |\r\n\t                         /application\\/vnd.ms-cab-compressed/ |\r\n\t                         /application\\/pdf/ |\r\n\t                         /application\\/x-shockwave-flash/ |\r\n\t                         /application\\/x-java-applet/ |\r\n\t                         /application\\/jar/ |\r\n\t                         /video\\/mp4/ &redef;\r\n\r\n\t## The Match notice has a sub message with a URL where you can get more\r\n\t## information about the file. The %s will be replaced with the SHA-1\r\n\t## hash of the file.\r\n\tconst match_sub_url = \"https://www.virustotal.com/en/search/?query=%s\" &redef;\r\n\r\n\t## The malware hash registry runs each malware sample through several\r\n\t## A/V engines.  Team Cymru returns a percentage to indicate how\r\n\t## many A/V engines flagged the sample as malicious. This threshold\r\n\t## allows you to require a minimum detection rate.\r\n\tconst notice_threshold = 10 &redef;\r\n}\r\n\r\nfunction do_mhr_lookup(hash: string, fi: Notice::FileInfo)\r\n\t{\r\n\tlocal hash_domain = fmt(\"%s.malware.hash.cymru.com\", hash);\r\n\r\n\twhen ( local MHR_result = lookup_hostname_txt(hash_domain) )\r\n\t\t{\r\n\t\t# Data is returned as \"<dateFirstDetected> <detectionRate>\"\r\n\t\tlocal MHR_answer = split_string1(MHR_result, / /);\r\n\r\n\t\tif ( |MHR_answer| == 2 )\r\n\t\t\t{\r\n\t\t\tlocal mhr_detect_rate = to_count(MHR_answer[1]);\r\n\r\n\t\t\tif ( mhr_detect_rate >= notice_threshold )\r\n\t\t\t\t{\r\n\t\t\t\tlocal mhr_first_detected = double_to_time(to_double(MHR_answer[0]));\r\n\t\t\t\tlocal readable_first_detected = strftime(\"%Y-%m-%d %H:%M:%S\", mhr_first_detected);\r\n\t\t\t\tlocal message = fmt(\"Malware Hash Registry Detection rate: %d%%  Last seen: %s\", mhr_detect_rate, readable_first_detected);\r\n\t\t\t\tlocal virustotal_url = fmt(match_sub_url, hash);\r\n\t\t\t\t# We don't have the full fa_file record here in order to\r\n\t\t\t\t# avoid the \"when\" statement cloning it (expensive!).\r\n\t\t\t\tlocal n: Notice::Info = Notice::Info($note=Match, $msg=message, $sub=virustotal_url);\r\n\t\t\t\tNotice::populate_file_info2(fi, n);\r\n\t\t\t\tNOTICE(n);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\nevent file_hash(f: fa_file, kind: string, hash: string)\r\n\t{\r\n\tif ( kind == \"sha1\" && f?$info && f$info?$mime_type && \r\n\t     match_file_types in f$info$mime_type )\r\n\t\tdo_mhr_lookup(hash, Notice::create_file_info(f));\r\n\t}",
        "enabled": true,
        "created_date": "2018-04-12T18:43:36.699Z",
        "updated_date": "2018-04-12T18:43:36.699Z"
    }
},
{
    "model": "bro.scriptbro",
    "pk": 102,
    "fields": {
        "name": "Detect file downloads that have hash values matching files in Team",
        "pcap_success": ""
    }
}
]
